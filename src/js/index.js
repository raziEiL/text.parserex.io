const { saveAs } = require("file-saver");
const XLSX = require("xlsx");
const parser = require("./parser");

const generateFileName = () => new Date().toDateString() + ".xlsx";

const textArea = document.querySelector("#text-val");
const tooltipExcel = document.querySelector("#tooltip-1");
const tooltipBuffer = document.querySelector("#tooltip-2");
const dwnBtn = document.querySelector("#dwn-btn");
const copyBtn = document.querySelector("#copy-btn");

try {
    const { version } = require("../../package.json");
    document.querySelector("#version").innerHTML = "v" + version;
} catch { }

const TOOLTIP_EXCEL = tooltipExcel.innerHTML;
const TOOLTIP_BUFFER = tooltipBuffer.innerHTML;

dwnBtn.addEventListener("mouseout", () => {
    tooltipExcel.innerHTML = TOOLTIP_EXCEL;
}, false);

dwnBtn.addEventListener("click", () => {
    download(true);
}, false);

copyBtn.addEventListener("mouseout", () => {
    tooltipBuffer.innerHTML = TOOLTIP_BUFFER;
}, false);

copyBtn.addEventListener("click", () => {
    download(false);
}, false);

function download(excel) {
    const aoa = parser.parseToExcel(textArea.value);

    if (!aoa) {
        if (excel)
            tooltipExcel.innerHTML = "Не удалось отформатировать текст";
        else
            tooltipBuffer.innerHTML = "Не удалось отформатировать текст";
        return;
    }
    if (excel) {
        const wb = XLSX.utils.book_new();
        wb.Props = {
            /*      Title: "Generated by Parser IO",
                    Subject: "Parser IO",
                    Author: "Raz1el", */
            CreatedDate: new Date()
        };

        wb.SheetNames.push("Document");
        const ws = XLSX.utils.aoa_to_sheet(aoa);
        wb.Sheets["Document"] = ws;

        const wbout = XLSX.write(wb, { bookType: "xlsx", bookSST: false, type: "array" });
        saveAs(new Blob([wbout], { type: "application/octet-stream" }), generateFileName());
    }
    else {
        const text = parser.parseToBuffer(aoa);

        if (!text) {
            tooltipBuffer.innerHTML = "Ошибка форматирования...";
            return;
        }

        textArea.value = text;
        textArea.focus();
        textArea.select();

        try {
            const successful = document.execCommand("copy");
            textArea.value = "";

            if (successful)
                tooltipBuffer.innerHTML = "Скопировано в буфер обмена";
            else
                throw new Error("Failed to copy");
        } catch (error) {
            console.error("Fallback: Oops, unable to copy", error);
            tooltipBuffer.innerHTML = "Не удалось скопировать в буфер обмена";
        }
    }
}